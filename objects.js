// Generated by CoffeeScript 1.7.1
(function() {
  var Bicycle, BicycleFactory, Car, CarFactory, Vehicle, VehicleFactory, aBroomstickMaybe, bicycle, car, error, factory, movingThing, mycar, vehicle, vehicles, yourbike, _i, _j, _len, _len1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  car = {
    vehicleType: "car",
    speed: 80
  };

  bicycle = {
    vehicleType: "bicycle",
    speed: 15
  };

  vehicles = [car, bicycle];

  for (_i = 0, _len = vehicles.length; _i < _len; _i++) {
    vehicle = vehicles[_i];
    console.log(vehicle.vehicleType + " " + vehicle.speed);
  }

  Vehicle = (function() {
    function Vehicle(vehicleType, speed) {
      this.vehicleType = vehicleType;
      this.speed = speed;
    }

    Vehicle.prototype.travelTime = function(distance) {
      return distance / this.speed;
    };

    return Vehicle;

  })();

  Car = (function(_super) {
    __extends(Car, _super);

    function Car() {
      Car.__super__.constructor.call(this, "car", 80);
    }

    return Car;

  })(Vehicle);

  Bicycle = (function(_super) {
    __extends(Bicycle, _super);

    function Bicycle() {
      Bicycle.__super__.constructor.call(this, "bicycle", 15);
    }

    return Bicycle;

  })(Vehicle);

  mycar = new Car;

  yourbike = new Bicycle;

  console.log("It takes me " + mycar.travelTime(300) + " hours to travel to TC");

  console.log("It takes you " + yourbike.travelTime(300) + " hours to travel to TC");

  car = {
    vehicleType: "car",
    speed: 80
  };

  bicycle = {
    vehicleType: "bicycle",
    speed: 15
  };

  vehicles = [car, bicycle];

  for (_j = 0, _len1 = vehicles.length; _j < _len1; _j++) {
    vehicle = vehicles[_j];
    console.log(vehicle.vehicleType + " " + vehicle.speed);
  }

  Vehicle = (function() {
    function Vehicle(vehicleType, speed) {
      this.vehicleType = vehicleType;
      this.speed = speed;
    }

    Vehicle.prototype.travelTime = function(distance) {
      return distance / this.speed;
    };

    return Vehicle;

  })();

  Car = (function(_super) {
    __extends(Car, _super);

    function Car() {
      Car.__super__.constructor.call(this, "car", 80);
    }

    Car.prototype.canDriveOnHighWay = function() {
      return true;
    };

    return Car;

  })(Vehicle);

  Bicycle = (function(_super) {
    __extends(Bicycle, _super);

    function Bicycle() {
      Bicycle.__super__.constructor.call(this, "bicycle", 15);
    }

    Bicycle.prototype.canDriveOnHighWay = function() {
      return false;
    };

    return Bicycle;

  })(Vehicle);

  mycar = new Car;

  yourbike = new Bicycle;

  console.log("It takes me " + mycar.travelTime(300) + " hours to travel to TC");

  console.log("It takes you " + yourbike.travelTime(300) + " hours to travel to TC");

  VehicleFactory = (function() {
    function VehicleFactory() {}

    return VehicleFactory;

  })();

  factory = new VehicleFactory();

  try {
    aBroomstickMaybe = factory.getVehicle();
  } catch (_error) {
    error = _error;
    console.log(error);
  }

  CarFactory = (function(_super) {
    __extends(CarFactory, _super);

    function CarFactory() {
      return CarFactory.__super__.constructor.apply(this, arguments);
    }

    CarFactory.prototype.getVehicle = function() {
      return new Car;
    };

    return CarFactory;

  })(VehicleFactory);

  factory = new CarFactory();

  movingThing = factory.getVehicle();

  console.log(movingThing.travelTime(100));

  BicycleFactory = (function(_super) {
    __extends(BicycleFactory, _super);

    function BicycleFactory() {
      return BicycleFactory.__super__.constructor.apply(this, arguments);
    }

    BicycleFactory.prototype.getVehicle = function() {
      return new Bicycle;
    };

    return BicycleFactory;

  })(VehicleFactory);

  factory = new BicycleFactory;

  movingThing = factory.getVehicle();

  console.log(movingThing.travelTime(100));

}).call(this);
